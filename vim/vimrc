"       ___                                                         ___           ___           ___     
"      /__/\          ___                  ___        ___          /__/\         /  /\         /  /\    
"     |  |::\        /__/|                /__/\      /  /\        |  |::\       /  /::\       /  /:/    
"     |  |:|:\      |  |:|                \  \:\    /  /:/        |  |:|:\     /  /:/\:\     /  /:/     
"   __|__|:|\:\     |  |:|                 \  \:\  /__/::\      __|__|:|\:\   /  /:/~/:/    /  /:/  ___ 
"  /__/::::| \:\  __|__|:|             ___  \__\:\ \__\/\:\__  /__/::::| \:\ /__/:/ /:/___ /__/:/  /  /\
"  \  \:\~~\__\/ /__/::::\            /__/\ |  |:|    \  \:\/\ \  \:\~~\__\/ \  \:\/:::::/ \  \:\ /  /:/
"   \  \:\          ~\~~\:\           \  \:\|  |:|     \__\::/  \  \:\        \  \::/~~~~   \  \:\  /:/ 
"    \  \:\           \  \:\           \  \:\__|:|     /__/:/    \  \:\        \  \:\        \  \:\/:/  
"     \  \:\           \__\/            \__\::::/      \__\/      \  \:\        \  \:\        \  \::/   
"      \__\/                                ~~~~                   \__\/         \__\/         \__\/     
" 

" if‧empty(glob("~/.vim/autoload/plug.vim"))↵
" ‧‧‧‧execute‧'!curl‧-fLo‧~/.vim/autoload/plug.vim‧https://raw.github.com/junegunn/vim-plug/master/plug.vim'↵
" endif↵

if has('persistent_undo')      "check if your vim version supports it
  set undofile                 "turn on the feature  
  set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
endif  


" {{ Plugins
call plug#begin('~/.vim/plugged')

" {{ Plugin: aesthetics
Plug 'vim-airline/vim-airline' 
Plug 'vim-airline/vim-airline-themes' 
" Plug 'rainglow/vim' 			> commented since I'm now using
" Plug 'NLKNguyen/papercolor-theme'	> dylanaraps' pywal
" Plug 'dylanaraps/wal.vim'
" Plug 'chrisbra/Colorizer'
Plug 'flazz/vim-colorschemes' "
Plug 'thiagoalessio/rainbow_levels.vim'
"  }}

" {{ autocomplete plugins and syntax supports
"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/asyncomplete.vim'
"Plug 'prabirshrestha/vim-lsp'
"Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
"  }}

" {{ miscellaneous Plugins
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'chrisbra/recover.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'senderle/restoreview' "based here:  https://vim.fandom.com/wiki/Make_views_automatic
Plug 'junegunn/vim-easy-align' " Shorthand; fetches https://github.com/junegunn/vim-easy-align
Plug 'wincent/terminus' "
Plug 'christoomey/vim-tmux-navigator' "tmux integration for ease of changing focus
"  }}

call plug#end()

" }}

" {{ Settings and keymapping
" {{ aesthetic. Font, space rendering, tabstops
" indentation settings https://vim.fandom.com/wiki/Indenting_source_code?section=5

let g:airline_theme='minimalist'
                                    " set background=dark 								" keeping here for reference but I think this setting is pointless when using a colorscheme
colorscheme pulumi                  " spacegray
set rnu                             " turn on relative line numbers
set linespace=3                     " insert 3pixels per characters
set guifont=Roboto\ Mono            " Fira\ Code:h12
set list                            " turns on showing of unprintable characters. ie render whitespaces
set listchars=eol:↵,tab:›\ ,space:‧ " controlling what characters would render which spaces(eol,tab and space)
set list!                            " turns on showing of unprintable characters. ie render whitespaces
set scrolloff=8                     " max scrolling offset. scrolls whole page when remaining lines is less than the number
set autoindent                      " insert mode enter matches indentation of previous line
set smartindent                     " syntax detecting indentation
set tabstop=2                       " <TAB> occupies 2 spaces
set shiftwidth=2                    " just see the indentation settings above. lol
set softtabstop=2
set splitbelow splitright           " make splitting of panes more intuitive

" }}

" {{ Rainbow settings https://jonajacek.github.io/colors
hi! RainbowLevel0 ctermfg=047|"ctermfg=068 guifg=#6699cc
hi! RainbowLevel1 ctermfg=045|"ctermfg=203 guifg=#ec5f67
hi! RainbowLevel2 ctermfg=190|"ctermfg=221 guifg=#fac863
hi! RainbowLevel3 ctermfg=214|"ctermfg=114 guifg=#99c794
hi! RainbowLevel4 ctermfg=129|"ctermfg=176 guifg=#c594c5
hi! RainbowLevel5 ctermfg=160|"ctermfg=209 guifg=#f99157
hi! RainbowLevel6 ctermfg=165|"ctermfg=073 guifg=#62b3b2
hi! RainbowLevel7 ctermfg=009|"ctermfg=137 guifg=#ab7967
" }}

" {{ Custom key mappings
function! MapBoth(mapmode, keys, rhs)
    execute 'n'.a:mapmode a:keys a:rhs
    execute 'i'.a:mapmode a:keys a:rhs
endfunction

let mapleader = " "

call MapBoth('noremap', '<Leader>;q', '<Esc>:q<CR>') " ease of quitting, saving. both normal and insert mode
call MapBoth('noremap', '<Leader>;qqq', '<Esc>:q!<CR>')
call MapBoth('noremap', '<Leader>;w', '<Esc>:noh<CR>:w<CR>')
call MapBoth('noremap', '<Leader>;ewq', '<Esc>:wq!<CR>')

" navigate to next and previous tabs
nnoremap <Leader>;n :tabnext<CR> 
nnoremap <Leader>;p :tabprev<CR>

noremap! <Esc> <Nop>
noremap! jk <Esc>:noh<CR>
vnoremap jk <Esc>:noh<CR>

" for split pane navigation 
noremap! <C-J> <C-W><C-J>
noremap! <C-K> <C-W><C-K>
noremap! <C-L> <C-W><C-L>
noremap! <C-H> <C-W><C-H>

" resizing splits
noremap! <Esc>[1;5A <C-W>+ 
noremap! <Esc>[1;5B <C-W>-
noremap! <Esc>[1;5D <C-W>>
noremap! <Esc>[1;5C <C-W><

" formoving splits 
nnoremap <C-N> <C-W>r
nnoremap <C-P> <C-W>R

noremap <C-P> <Esc>:FZF<CR>

imap GG <Esc>G$i

" I haven't found o and O to be a useful shortcut yet
noremap O O<Esc>
noremap o o<Esc>

command! Reload execute "source ~/.vimrc"

" had to put bar so I coiuld add comments inline with mappings  https://stackoverflow.com/posts/24717020/revisions
nnoremap H zc|				  " close fold on current cursor
nnoremap L zo|				  " open on current cursor
nnoremap <Leader>;H zm| " decrese folding level
nnoremap <Leader>;L zr| " increase folding level

" moving text above or below. this was a useful thing in vscode
" http://vim.wikia.com/wiki/Moving_lines_up_or_down ∆ is ALT-j ˚ is ALT-k
nnoremap ∆ :m .+1<CR>==     
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv
noremap ‘ :tabnext<CR>
noremap “ :tabprev<CR>

" }}

" {{ CoC Autocomplete settings and shortcuts
" Use tab for trigger completion with characters ahead and navigate.
" " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" " other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
			\ pumvisible() ? "\<C-n>" :
			\ <SID>check_back_space() ? "\<TAB>" :
			\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

set completeopt+=preview

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" }}

" {{ nerd tree settings
call MapBoth('noremap', '<Leader>;t', '<Esc>:NERDTreeToggle<CR>')
" map  <leader>;t :NERDTreeToggle<cr>
" map  <leader>tf :NERDTreeFind<cr>
" }}
" }}
